!<arch>
0-isupper.c/    0           0     0     644     232       `
#include "main.h"

/**
 * _isupper - Find if input is a capital letter
 * @c: input
 * Return: 1 if true, else 0
 */

int _isupper(int c)
{
	int o;

	if ((c >= 'A') && (c <= 'Z'))
	{
		o = 1;
	}
	else
	{
		o = 0;
	}

	return (o);
}
0-memset.c/     0           0     0     644     333       `
#include "main.h"

/**
 * _memset - Fills memory with a constant byte
 * @s: Memory area to be filled
 * @b: Byte to fill memory
 * @n: Number of bytes to be filled
 * Return: pointer to memory area s
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i <  n; i++)
	{
		s[i] = b;
	}

	return (s);
}

0-strcat.c/     0           0     0     644     348       `
#include "main.h"

/**
 * _strcat - concatenates two strings
 * @dest: string input one. src is appended here.
 * @src: string input two.
 * Return: Pointer to dest.
 */

char *_strcat(char *dest, char *src)
{
	int i, j;

	for (i = 0; dest[i] != '\0'; i++)
	{}

	for (j = 0; src[j] != '\0'; j++)
	{
		dest[i] = src[j];
		i++;
	}

	return (dest);
}
100-atoi.c/     0           0     0     644     631       `
#include "main.h"
#include <stdio.h>
/**
 * _atoi - converts number in string to integer
 * @s: input string
 * Return: value of integer string
 */

int _atoi(char *s)
{
	int i, num, sign = 1, output = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] == '-')
			sign = sign * -1;
		if (s[i] >= '0' && s[i] <= '9')
		{
			if (sign == -1)
			{
				output = output * 10;
				num = (s[i] - '0');
				output = output - num;
			}
			else
			{
				output = output * 10;
				num = (s[i] - '0');
				output = output + num;
			}
		}
		if ((s[i] >= '0' && s[i] <= '9') && (s[i + 1] < '0' || s[i + 1] > '9'))
			break;
	}
	return (output);
}

1-isdigit.c/    0           0     0     644     212       `
#include "main.h"

/**
 * _isdigit - checks if input is a digit
 * @c: input
 * Return: 1 if digit, else 0
 */
int _isdigit(int c)
{
	int o;

	if ((c >= '0') && (c <= '9'))
		o = 1;
	else
		o = 0;
	return (o);
}
1-memcpy.c/     0           0     0     644     324       `
#include "main.h"

/**
 * _memcpy - Copies a memory area
 * @dest: Bytes are copied here
 * @src: Memory area to be copied
 * @n: Number of bytes to be copied
 * Return: pointer to dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	int i;

	for (i = 0; i < (int) n; i++)
		dest[i] = src[i];
	return (dest);
}
1-strncat.c/    0           0     0     644     419       `
#include "main.h"

/**
 * _strncat - concatenates two strings
 * @dest: string input one. src is appended here.
 * @src: string input two.
 * @n: number of bytes to use from src
 * Return: Pointer to dest.
 */

char *_strncat(char *dest, char *src, int n)
{
	int i, j;

	for (i = 0; dest[i] != '\0'; i++)
	{}

	for (j = 0; j < n; j++)
	{
		dest[i] = src[j];
		i++;
		if (src[j] == '\0')
			break;
	}

	return (dest);
}

2-strchr.c/     0           0     0     644     347       `
#include "main.h"

/**
 * _strchr - Locates a character in a string
 * @s: string to be searched
 * @c: Character to be searched for
 * Return: pointer to first occurance of c, or NULL if not found
 */

char *_strchr(char *s, char c)
{
	while (*s)
	{
		if (*s == c)
		{
			break;
		}
		s++;
	}
	if (*s == c)
		return (s);
	else
		return ('\0');
}

2-strlen.c/     0           0     0     644     222       `
#include "main.h"

/**
 * _strlen - returns length of a string
 * @s: Input string
 * Return: length of string
 */

int _strlen(char *s)
{
	int i, count = 0;

	for (i = 0; s[i] != '\0'; i++)
		count++;

	return (count);
}
2-strncpy.c/    0           0     0     644     350       `
#include "main.h"

/**
 * _strncpy - copies a string
 * @dest: Destination string
 * @src: string to be copied
 * @n: number of bytes from src to be copied
 * Return: pointer to dest
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i, j = 0;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[j];
		if (src[j] != '\0')
			j++;
	}
	return (dest);
}
3-islower.c/    0           0     0     644     258       `
#include "main.h"

/**
 * _islower - Function begins here.
 * @c: Character input to check
 * Return: Returns 1 if c is lowercase, returns 0 otherwise.
 */

int _islower(int c)
{
	int i;

	if ((c >= 97) && (c <= 122))
		i = 1;
	else
		i = 0;

	return (i);
}
3-puts.c/       0           0     0     644     256       `
#include "main.h"

/**
 * _puts - prints a string followed by a newline to the standard output
 * @str: input string to be printed
 * Return: void
 */

void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
		_putchar(str[i]);
	_putchar(10);
}
3-strcmp.c/     0           0     0     644     312       `
#include "main.h"

/**
 * _strcmp - Compares two strings
 * @s1: String input 1
 * @s2: String input 2
 * Return: int difference between s1 and s2
 */

int _strcmp(char *s1, char *s2)
{
	int diff = 0;

	while (*s1)
	{
		if (*s1 != *s2)
		{
			diff = *s1 - *s2;
			break;
		}
		s1++;
		s2++;
	}
	return (diff);
}
3-strspn.c/     0           0     0     644     458       `
#include "main.h"

/**
 * _strspn - gets the length of the prefix of a substring
 * @s: input string to be checked
 * @accept: bytes to be checked
 * Return: Length of bytes only from accept in s
 */

unsigned int _strspn(char *s, char *accept)
{
	int i;
	unsigned int out = 0;

	while (*s)
	{
		for (i = 0; accept[i] != '\0'; i++)
		{
			if (*s == accept[i])
			{
				out++;
				break;
			}
		}
		if (accept[i] == '\0')
			break;
		s++;
	}
	return (out);
}
4-isalpha.c/    0           0     0     644     281       `
#include "main.h"

/**
 * _isalpha - function begins here
 * @c: Single letter input
 * Return: Returns 1 if c is a letter, returns 0 otherwise.
 */

int _isalpha(int c)
{
	int i;

	if (((c >= 97) && (c <= 122)) || ((c >= 65) && (c <= 90)))
		i = 1;
	else
		i = 0;

	return (i);
}

4-strpbrk.c/    0           0     0     644     520       `
#include "main.h"

/**
 * _strpbrk - seaches a string for any set of bytes
 * @s: input string to be searched
 * @accept: string to search from
 * Return: pointer to byte s that matches accept, or NULL
 */

char *_strpbrk(char *s, char *accept)
{
	int i, j, success = 0;

	for (i = 0; *(s + i); i++)
	{
		for (j = 0; *(accept + j); j++)
		{
			if (*(s + i) == *(accept + j))
			{
				break;
			}
		}
		if (*(accept + j) != '\0')
		{
			success = 1;
			break;
		}
	}
	if (success)
		return (s + i);
	else
		return (0);
}
5-strstr.c/     0           0     0     644     519       `
#include "main.h"
#include <stdio.h>
/**
 * _strstr - finds the first occurance of needle in haystack
 * @haystack: string to be searched
 * @needle: string to be searched for
 * Return: pointer to beginning of located substring, or null
 */

char *_strstr(char *haystack, char *needle)
{
	int i = 0, j;

	while (*(haystack + i))
	{
		j = 0;
		while (*(needle + j))
		{
			if (*(needle + j) != *(haystack + i + j))
				break;
			j++;
		}
		if (*(needle + j) == '\0')
			return (haystack + i);
		i++;
	}

	return (0);
}

6-abs.c/        0           0     0     644     215       `
#include "main.h"

/**
 * _abs - function begins here
 * @n: Single int input.
 * Return: returns the absolute value of input
 */

int _abs(int n)
{
	int u;

	if (n < 0)
		u = n * -1;
	else
		u = n;

	return (u);
}

9-strcpy.c/     0           0     0     644     326       `
#include "main.h"

/**
 * _strcpy - Copies a string
 * @dest: array to be copied into
 * @src: string to be copied
 * Return: the pointer to dest
 */

char *_strcpy(char *dest, char *src)
{
	int i, j, count = 0;

	for (i = 0; src[i] != '\0'; i++)
		count++;
	for (j = 0; j <= count; j++)
		dest[j] = src[j];
	return (dest);
}
main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

